{"name": "test_yonghuguanli[excel_data14]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=96.0.4664.110)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00936903+2517251]\n\tOrdinal0 [0x008CF8E1+2095329]\n\tOrdinal0 [0x007D2848+1058888]\n\tOrdinal0 [0x007D4F44+1068868]\n\tOrdinal0 [0x007D4E0E+1068558]\n\tOrdinal0 [0x007D56BA+1070778]\n\tOrdinal0 [0x008264F9+1402105]\n\tOrdinal0 [0x008164D3+1336531]\n\tOrdinal0 [0x00825BBF+1399743]\n\tOrdinal0 [0x0081639B+1336219]\n\tOrdinal0 [0x007F27A7+1189799]\n\tOrdinal0 [0x007F3609+1193481]\n\tGetHandleVerifier [0x00AC5904+1577972]\n\tGetHandleVerifier [0x00B70B97+2279047]\n\tGetHandleVerifier [0x009C6D09+534521]\n\tGetHandleVerifier [0x009C5DB9+530601]\n\tOrdinal0 [0x008D4FF9+2117625]\n\tOrdinal0 [0x008D98A8+2136232]\n\tOrdinal0 [0x008D99E2+2136546]\n\tOrdinal0 [0x008E3541+2176321]\n\tBaseThreadInitThunk [0x760BFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]", "trace": "self = <testcase.test_usermanage.TestUserManage object at 0x0000026CD5A657C0>\nexcel_data = {'action': '[[\"click()\"],[\"click()\"],[\"click()\"],[\"click()\"],[\"click()\"]]', 'assertparam': \"[By.CLASS_NAME,'el-message__content']\", 'assertresult': '启用成功', 'function': '启用', ...}\nstart = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"efb72be6eed9f81507b41fa731530b36\")>\n\n    def test_yonghuguanli(self,excel_data,start):\n        testdata=excel_data\n        self.driver=start\n        Log.info(testdata)\n        # 等待页面菜单加载，否则容易出现菜单点击不到\n        sleep(1)\n        #点击系统设置\n        UserManagePage(self.driver).syssetting_page()\n        Page(self.driver).wait_until_clickable(self.driver,UserManagePage(self.driver).usermanage)\n        sleep(0.5)\n        #点击用户管理\n        UserManagePage(self.driver).usermanage_page()\n        sleep(0.5)\n        for i in range(len(eval(testdata[\"param\"]))):\n>           Page(self.driver).wait_until_clickable(self.driver, eval(testdata[\"param\"])[i])\n\ntest_usermanage.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\page.py:71: in wait_until_clickable\n    return WebDriverWait(driver,time,poll,ignored_exceptions=None).until(EC.element_to_be_clickable(loc))\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:78: in until\n    value = method(self._driver)\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:327: in _predicate\n    target = visibility_of(target)(driver)\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:143: in _predicate\n    return _element_if_visible(element)\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:149: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:564: in is_displayed\n    return self.parent.execute_script(\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:878: in execute_script\n    return self.execute(command, {\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026CD7053700>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=96.0.4664.110)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00936903+2517251]\nE       \tOrdinal0 [0x008CF8E1+2095329]\nE       \tOrdinal0 [0x007D2848+1058888]\nE       \tOrdinal0 [0x007D4F44+1068868]\nE       \tOrdinal0 [0x007D4E0E+1068558]\nE       \tOrdinal0 [0x007D56BA+1070778]\nE       \tOrdinal0 [0x008264F9+1402105]\nE       \tOrdinal0 [0x008164D3+1336531]\nE       \tOrdinal0 [0x00825BBF+1399743]\nE       \tOrdinal0 [0x0081639B+1336219]\nE       \tOrdinal0 [0x007F27A7+1189799]\nE       \tOrdinal0 [0x007F3609+1193481]\nE       \tGetHandleVerifier [0x00AC5904+1577972]\nE       \tGetHandleVerifier [0x00B70B97+2279047]\nE       \tGetHandleVerifier [0x009C6D09+534521]\nE       \tGetHandleVerifier [0x009C5DB9+530601]\nE       \tOrdinal0 [0x008D4FF9+2117625]\nE       \tOrdinal0 [0x008D98A8+2136232]\nE       \tOrdinal0 [0x008D99E2+2136546]\nE       \tOrdinal0 [0x008E3541+2176321]\nE       \tBaseThreadInitThunk [0x760BFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]\n\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: StaleElementReferenceException"}, "steps": [{"name": "添加失败截图...", "status": "passed", "attachments": [{"name": "失败截图", "source": "449ac6be-4423-4934-96ae-947cc2b2b772-attachment.png", "type": "image/png"}], "start": 1640264125022, "stop": 1640264125276}], "attachments": [{"name": "log", "source": "4a7196bc-dbb4-430c-a4a7-5a66acd95985-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "excel_data", "value": "{'id': 15, 'module': '用户管理', 'function': '启用', 'param': '[[By.XPATH,\\'//*[@id=\"appMain\"]/div/div/form/div[5]/div/div/div/div/input\\'],[By.XPATH,\\'/html/body/div[2]/div[1]/div[1]/ul/li[3]/span\\'],[By.XPATH,\\'//*[@id=\"appMain\"]/div/div/form/span/button[1]\\'],[By.XPATH,\\'//*[@id=\"appMain\"]/div/div/div/div[2]/div[5]/div[2]/table/tbody/tr[1]/td[10]/div/div/button[1]/span\\'],[By.XPATH,\\'/html/body/div[3]/div/div[3]/button[2]\\']]', 'action': '[[\"click()\"],[\"click()\"],[\"click()\"],[\"click()\"],[\"click()\"]]', 'assertparam': \"[By.CLASS_NAME,'el-message__content']\", 'assertresult': '启用成功'}"}], "start": 1640264121520, "stop": 1640264124984, "uuid": "c5b52fcd-309d-4394-8203-f3d35b7fc2ce", "historyId": "1bb63371b79f03bb0a854efdd40d6f93", "testCaseId": "2d3749746967671da8eeb73113567413", "fullName": "testcase.test_usermanage.TestUserManage#test_yonghuguanli", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_usermanage"}, {"name": "subSuite", "value": "TestUserManage"}, {"name": "host", "value": "zhou"}, {"name": "thread", "value": "21564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_usermanage"}]}
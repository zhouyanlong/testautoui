{"name": "test_xiansuoliebiao[excel_data8]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i class=\"sort-caret ascending\"></i> is not clickable at point (258, 199). Other element would receive the click: <div class=\"el-loading-mask\" style=\"\">...</div>\n  (Session info: chrome=96.0.4664.110)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00936903+2517251]\n\tOrdinal0 [0x008CF8E1+2095329]\n\tOrdinal0 [0x007D2848+1058888]\n\tOrdinal0 [0x00803509+1258761]\n\tOrdinal0 [0x00801868+1251432]\n\tOrdinal0 [0x007FF65D+1242717]\n\tOrdinal0 [0x007FE4A8+1238184]\n\tOrdinal0 [0x007F4037+1196087]\n\tOrdinal0 [0x008164D3+1336531]\n\tOrdinal0 [0x007F3A36+1194550]\n\tOrdinal0 [0x008165BA+1336762]\n\tOrdinal0 [0x00825BBF+1399743]\n\tOrdinal0 [0x0081639B+1336219]\n\tOrdinal0 [0x007F27A7+1189799]\n\tOrdinal0 [0x007F3609+1193481]\n\tGetHandleVerifier [0x00AC5904+1577972]\n\tGetHandleVerifier [0x00B70B97+2279047]\n\tGetHandleVerifier [0x009C6D09+534521]\n\tGetHandleVerifier [0x009C5DB9+530601]\n\tOrdinal0 [0x008D4FF9+2117625]\n\tOrdinal0 [0x008D98A8+2136232]\n\tOrdinal0 [0x008D99E2+2136546]\n\tOrdinal0 [0x008E3541+2176321]\n\tBaseThreadInitThunk [0x760BFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]", "trace": "self = <testcase.test_cluelist.TestClueList object at 0x0000026CD5BBAA60>\nexcel_data = {'action': None, 'assertparam': '[By.XPATH,\\'//*[@id=\"appMain\"]/div/div/div[2]/div[2]/div[3]/div/span\\']', 'assertresult': '暂无数据', 'function': '呼叫时间升序', ...}\nstart = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bcc4c08dc2a4bb064bd6cfab11c0d4ce\")>\n\n    def test_xiansuoliebiao(self,excel_data,start):\n        testdata=excel_data\n        self.driver=start\n        Log.info(testdata)\n        sleep(0.5)\n        #点击线索中心\n        ClueListPage(self.driver).cluecenter_page()\n        #等待线索列表\n        Page(self.driver).wait_until_presence(self.driver,ClueListPage(self.driver).cluelist)\n        #点击线索列表\n        ClueListPage(self.driver).cluelist_page()\n        sleep(1)\n    \n        # 如果id大于8，则需要点击详情后操作\n        if int(testdata[\"id\"])>8:\n            #点击最近30天后点击详情\n            ClueListPage(self.driver).last30_btn()\n            #等待查询元素\n            sleep(1)\n            #WebDriverWait(self.driver, 10, 0.5).until(EC.presence_of_element_located((By.XPATH,'//*[@id=\"appMain\"]/div/div/form/span/button[1]/span')))\n            ClueListPage(self.driver).seach_btn()\n            #等待详细元素存在点击详情\n            sleep(2)\n            ClueListPage(self.driver).detail_btn()\n            #等待新页面的元素加载\n            sleep(2)\n            # 点击excel中的param元素\n>           Page(self.driver).find_element(*eval(testdata[\"param\"])).click()\n\ntest_cluelist.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026CD550AD30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i class=\"sort-caret ascending\"></i> is not clickable at point (258, 199). Other element would receive the click: <div class=\"el-loading-mask\" style=\"\">...</div>\nE         (Session info: chrome=96.0.4664.110)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00936903+2517251]\nE       \tOrdinal0 [0x008CF8E1+2095329]\nE       \tOrdinal0 [0x007D2848+1058888]\nE       \tOrdinal0 [0x00803509+1258761]\nE       \tOrdinal0 [0x00801868+1251432]\nE       \tOrdinal0 [0x007FF65D+1242717]\nE       \tOrdinal0 [0x007FE4A8+1238184]\nE       \tOrdinal0 [0x007F4037+1196087]\nE       \tOrdinal0 [0x008164D3+1336531]\nE       \tOrdinal0 [0x007F3A36+1194550]\nE       \tOrdinal0 [0x008165BA+1336762]\nE       \tOrdinal0 [0x00825BBF+1399743]\nE       \tOrdinal0 [0x0081639B+1336219]\nE       \tOrdinal0 [0x007F27A7+1189799]\nE       \tOrdinal0 [0x007F3609+1193481]\nE       \tGetHandleVerifier [0x00AC5904+1577972]\nE       \tGetHandleVerifier [0x00B70B97+2279047]\nE       \tGetHandleVerifier [0x009C6D09+534521]\nE       \tGetHandleVerifier [0x009C5DB9+530601]\nE       \tOrdinal0 [0x008D4FF9+2117625]\nE       \tOrdinal0 [0x008D98A8+2136232]\nE       \tOrdinal0 [0x008D99E2+2136546]\nE       \tOrdinal0 [0x008E3541+2176321]\nE       \tBaseThreadInitThunk [0x760BFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]\n\nD:\\python3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "steps": [{"name": "添加失败截图...", "status": "passed", "attachments": [{"name": "失败截图", "source": "0013a7aa-ff15-4c3d-a858-22bf42951583-attachment.png", "type": "image/png"}], "start": 1640263586241, "stop": 1640263586427}], "attachments": [{"name": "log", "source": "83dd2096-ad46-4249-9435-d9900ed3d178-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "excel_data", "value": "{'id': 9, 'module': '线索列表', 'function': '呼叫时间升序', 'param': '[By.XPATH,\\'//*[@id=\"appMain\"]/div/div/div[2]/div[2]/div[2]/table/thead/tr/th[1]/div/span/i[1]\\']', 'action': None, 'assertparam': '[By.XPATH,\\'//*[@id=\"appMain\"]/div/div/div[2]/div[2]/div[3]/div/span\\']', 'assertresult': '暂无数据'}"}], "start": 1640263577470, "stop": 1640263586217, "uuid": "293ec04a-1d24-4664-a77e-fc608b3b326f", "historyId": "4f64a42d5c3c1617b6e97b72fb2240d5", "testCaseId": "d890348c826c8f67c95186f447e29a41", "fullName": "testcase.test_cluelist.TestClueList#test_xiansuoliebiao", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_cluelist"}, {"name": "subSuite", "value": "TestClueList"}, {"name": "host", "value": "zhou"}, {"name": "thread", "value": "21564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_cluelist"}]}